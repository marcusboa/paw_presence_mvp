import 'package:flutter/material.dart';
import 'dart:async';

// [NEW] Job Page Screen - A detailed view of a specific job
class JobPageScreen extends StatefulWidget {
  final int jobId;
  final String petName;
  
  const JobPageScreen({
    Key? key, 
    required this.jobId,
    required this.petName,
  }) : super(key: key);

  @override
  State<JobPageScreen> createState() => _JobPageScreenState();
}

class _JobPageScreenState extends State<JobPageScreen> {
  // Mock data for the job details
  late Map<String, dynamic> _jobDetails;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    // Simulate loading data from a service
    Timer(const Duration(milliseconds: 500), () {
      _loadJobDetails();
      setState(() {
        _isLoading = false;
      });
    });
  }

  void _loadJobDetails() {
    // Mock job details data
    _jobDetails = {
      'petName': widget.petName,
      'petImage': 'assets/images/golden_retriever.jpg',
      'isActive': true,
      'startDate': '2025-07-20',
      'endDate': '2025-07-27',
      'owners': [
        {
          'name': 'John Smith',
          'phone': '(555) 123-4567',
          'email': 'john.smith@example.com',
          'preferredContact': 'Text message'
        },
        {
          'name': 'Sarah Smith',
          'phone': '(555) 987-6543',
          'email': 'sarah.smith@example.com',
          'preferredContact': 'Email'
        }
      ],
      'address': '123 Pet Avenue, Petville, NY 10001',
      'entryInstructions': 'Key is hidden under the flowerpot on the front porch. Security code is 1234.',
      'generalInstructions': 'Max needs to be walked twice a day. He likes to play fetch in the backyard. Please ensure fresh water is available at all times.',
      'dailySchedule': [
        {
          'time': '07:00 AM',
          'task': 'Morning Walk',
          'details': 'Walk for 20-30 minutes, usual route around the park'
        },
        {
          'time': '08:00 AM',
          'task': 'Breakfast',
          'details': '1 cup of dog food with medication mixed in (in kitchen cabinet)'
        },
        {
          'time': '12:00 PM',
          'task': 'Midday Check',
          'details': 'Quick potty break and fresh water'
        },
        {
          'time': '06:00 PM',
          'task': 'Evening Walk',
          'details': 'Walk for 30 minutes, can explore different routes'
        },
        {
          'time': '07:00 PM',
          'task': 'Dinner',
          'details': '1 cup of dog food (no medication at night)'
        }
      ],
      'vetInfo': {
        'name': 'Dr. Emma Wilson',
        'clinic': 'Petville Veterinary Clinic',
        'address': '456 Vet Street, Petville, NY 10002',
        'phone': '(555) 234-5678',
        'notes': 'Max is due for his annual checkup on July 25th. Please call if any concerning symptoms appear.'
      },
      'groomerInfo': {
        'name': 'Paws & Claws Grooming',
        'address': '789 Groom Lane, Petville, NY 10003',
        'phone': '(555) 345-6789',
        'notes': 'Max has an appointment on July 23rd at 2:00 PM. Drop-off only, they will call when ready for pickup.'
      },
      'emergencyInstructions': 'In case of emergency, contact the Petville Emergency Vet Hospital at (555) 911-PETS. They are open 24/7. Pet insurance information is in the folder on the kitchen counter.'
    };
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Job Page'),
        backgroundColor: Colors.deepPurple,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.message),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Message owners feature is for demo only')),
              );
            },
          ),
          IconButton(
            icon: const Icon(Icons.more_vert),
            onPressed: () {
              _showJobOptions(context);
            },
          ),
        ],
      ),
      body: _isLoading 
          ? const Center(child: CircularProgressIndicator())
          : SingleChildScrollView(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  _buildPetHeader(),
                  _buildJobStatus(),
                  _buildJobDates(),
                  _buildSectionHeader('Owners'),
                  _buildOwnersSection(),
                  _buildSectionHeader('Location & Access'),
                  _buildLocationSection(),
                  _buildSectionHeader('Job Instructions'),
                  _buildInstructionsSection(),
                  _buildSectionHeader('Daily Schedule'),
                  _buildDailySchedule(),
                  _buildSectionHeader('Veterinary Information'),
                  _buildVetSection(),
                  _buildSectionHeader('Groomer Information'),
                  _buildGroomerSection(),
                  _buildSectionHeader('Emergency Instructions'),
                  _buildEmergencySection(),
                  const SizedBox(height: 24),
                ],
              ),
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Add daily update feature is for demo only')),
          );
        },
        backgroundColor: Colors.deepPurple,
        child: const Icon(Icons.add_a_photo),
      ),
    );
  }

  Widget _buildPetHeader() {
    return Container(
      padding: const EdgeInsets.all(16),
      child: Row(
        children: [
          // Pet image
          Container(
            width: 100,
            height: 100,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(12),
              color: Colors.grey.shade200,
              image: const DecorationImage(
                image: AssetImage('assets/images/golden_retriever.jpg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
          const SizedBox(width: 16),
          // Pet name
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  _jobDetails['petName'],
                  style: const TextStyle(
                    fontSize: 24,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Icon(Icons.pets, color: Colors.deepPurple.shade300),
                    const SizedBox(width: 4),
                    const Text('Golden Retriever'),
                    const SizedBox(width: 8),
                    Icon(Icons.cake, color: Colors.deepPurple.shade300),
                    const SizedBox(width: 4),
                    const Text('4 years old'),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildJobStatus() {
    final bool isActive = _jobDetails['isActive'];
    
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
        color: isActive ? Colors.green.shade100 : Colors.orange.shade100,
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: isActive ? Colors.green.shade300 : Colors.orange.shade300,
        ),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            isActive ? Icons.check_circle : Icons.schedule,
            color: isActive ? Colors.green : Colors.orange,
          ),
          const SizedBox(width: 8),
          Text(
            isActive ? 'Active Job' : 'Scheduled Job',
            style: TextStyle(
              color: isActive ? Colors.green.shade800 : Colors.orange.shade800,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildJobDates() {
    return Container(
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.grey.shade100,
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Start Date',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey.shade700,
                  ),
                ),
                const SizedBox(height: 4),
                Row(
                  children: [
                    Icon(Icons.calendar_today, color: Colors.deepPurple.shade300),
                    const SizedBox(width: 4),
                    Text(
                      _formatDate(_jobDetails['startDate']),
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          Container(
            height: 40,
            width: 1,
            color: Colors.grey.shade300,
          ),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'End Date',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey.shade700,
                  ),
                ),
                const SizedBox(height: 4),
                Row(
                  children: [
                    Icon(Icons.calendar_today, color: Colors.deepPurple.shade300),
                    const SizedBox(width: 4),
                    Text(
                      _formatDate(_jobDetails['endDate']),
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
